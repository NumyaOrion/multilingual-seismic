name =          "grid_evaluation_building_algorithms"
title =         "Evaluation building algorithms on MS MARCOV2"
description =   "We have three differrent algorithms to compute Kmeans on posting lists. We want to identify the best one and its paramenters."
dataset =       "Splade cocondenser on MS-MARCO V2"
# compile-command = "cargo build" # Compile in debug mode? default is release mode
# build-command = "./target/release/build_inverted_index"
# query-command = "./target/debug/perf_inverted_index"

[settings]
k =             10
n-runs =        1       # Number of runs. PLEASE think carefully how increasing 
                        #Â this may influence your query time
# NUMA =        ""      # "numactl --physcpubind='0-15' --localalloc"    # Is the machine NUMA and need to prepend "numactl --physcpubind='0-15' --localalloc" to query command? Otherwise comment this!
metric =        "RR@10"
build =        true    # Do we need to build the index?

[folder] 
data =          "~/sparse_datasets/msmarco_v2/cocondenser/data"
index =         "~/sparse_datasets/msmarco_v2/cocondenser/indexes"
qrels_path =    "~/sparse_datasets/msmarco_v2/qrels.dev1.tsv"
experiment =    "."     # stdout and stderr here of running the experiment is saved here. in a specific subfolder for the current execution

[filename]
dataset =       "documents.bin"
queries =       "queries.bin"
groundtruth =   "groundtruth.tsv"
doc_ids =       "doc_ids.npy"
query_ids =     "queries_ids.npy"
index =         "test_grid_search"

[indexing_parameters]
n-postings =            [60000, 100000]
centroid-fraction =     [0.1, 0.15]
summary-energy =        [0.4]
knn =                   [0]
clustering-algorithm =  ["random-kmeans-inverted-index", "random-kmeans-inverted-index-approx", "random-kmeans"]
kmeans-doc-cut =        [10, 25, 50]  # needed by "random-kmeans-inverted-index" and "random-kmeans-inverted-index-approx"
kmeans-pruning-factor = [0.005, 0.0025] # Only used by random-kmeans-inverted-index

[querying_parameters]
query-cuts = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
heap-factors = [0.7, 0.8, 0.9, 1.0]
knns = [0]
first_sorted = [true]
